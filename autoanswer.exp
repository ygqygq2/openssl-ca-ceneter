#!/usr/bin/expect -f

# 获取脚本所在目录
set script_path [file dirname [info script]]
puts "脚本所在目录: $script_path"

# 切换到脚本所在目录
cd $script_path
set real_path [exec pwd]
set csr_dir "$real_path/csrs"
set key_dir "$real_path/private"
set crt_dir "$real_path/certs"
set CA_NAME "my_CA"

#检查传入参数
if { $argc == 0 } {
    send_user "Usage:\texpect autoanswer.exp <domain_name>\n"
    send_user "Example:\texpect autoanswer.exp ygqygq2.com\n"
    exit
}

# 定义变量
set domain_name [lindex $argv 0]
set timeout 30

# 调用 base.sh 中的函数生成 v3.ext
set status 0
catch {exec bash -c "source ${real_path}/base.sh; create_v3_req $domain_name"} result status

# 检查执行状态
if {$status != 0} {
    send_user "Error: Failed to execute base.sh with status $status\n"
    exit $status
}

# 使用 spawn 命令启动 openssl
set spawn_id ""
spawn openssl ca -config ${real_path}/openssl.cnf -utf8 -extfile v3.ext \
    -in ${csr_dir}/${domain_name}.csr -cert ${crt_dir}/${CA_NAME}.crt -keyfile ${key_dir}/${CA_NAME}.key -out ${crt_dir}/${domain_name}.crt

set expect_status 0
expect {
    "y/n]" {
        send "y\r"
        exp_continue
    }
    eof {
        catch wait result
        set expect_status [lindex $result 3]
    }
}

# 检查 expect 命令的执行状态
if {$expect_status != 0} {
    send_user "Error: openssl command failed with status $expect_status\n"
    exit $expect_status
} else {
    send_user "Success: openssl command executed successfully\n"
}

# 根据需要添加更多的逻辑处理
